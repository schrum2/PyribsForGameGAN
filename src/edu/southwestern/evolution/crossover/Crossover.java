package edu.southwestern.evolution.crossover;

import edu.southwestern.evolution.genotypes.Genotype;
import edu.southwestern.util.datastructures.Pair;

/**
 * This is an abstract class that takes in the genotypes of two agents,
 * crosses them over, then returns the final product.
 *
 * @author Jacob Schrum
 * @param <T> Phenotype of genotypes being crossed over
 */
public abstract class Crossover<T> {

	/**
	 * There are two offspring from crossover. One is directly returned. The
	 * other is generated by modifying the genotype sent in, meaning that this
	 * parameter should always be a copy of the parent genotype being sent in.
	 * 
	 * @param toModify Reference to genotype that is modified by crossover.
	 * @param toReturn Reference to genotype whose modified child is returned.
	 * @return Returns the second genotype produced by the crossover.
	 */
	public abstract Genotype<T> crossover(Genotype<T> toModify, Genotype<T> toReturn);

	/**
	 * Returns pair of two genes with order swapped.
	 * 
	 * @param <G> Type of gene
	 * @param par1 gene from parent 1
	 * @param par2 gene from parent 2.
	 * @return Pair with genes in swapped order.
	 */
	public static <G> Pair<G, G> swap(G par1, G par2) {
		return new Pair<G, G>(par2, par1);
	}
}
